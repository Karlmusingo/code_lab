// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Render the ListDevs screen should render the ListDevs screen 1`] = `
<RCTSafeAreaView
  emulateUnlessSupported={true}
>
  <View
    style={
      Object {
        "alignItems": "center",
        "borderBottomColor": "#929292",
        "borderBottomWidth": 1,
        "display": "flex",
        "flexDirection": "row",
        "justifyContent": "space-between",
        "paddingHorizontal": 17,
        "paddingTop": 0,
        "zIndex": 9,
      }
    }
  >
    <View
      accessible={true}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Array [
          Object {
            "alignItems": "center",
            "display": "flex",
            "flexDirection": "row",
            "height": 60,
            "justifyContent": "space-between",
            "width": 70,
          },
          Object {
            "display": "flex",
          },
        ]
      }
    >
      <Image
        onPress={[Function]}
        source={
          Object {
            "uri": "image",
          }
        }
        style={
          Object {
            "borderRadius": 25,
            "height": 50,
            "left": 0,
            "marginRight": 5,
            "top": 0,
            "width": 50,
          }
        }
      />
      <View>
        <View
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "transparent",
              "justifyContent": "center",
            }
          }
          theme={
            Object {
              "colors": Object {
                "disabled": "hsl(208, 8%, 90%)",
                "divider": "#bcbbc1",
                "error": "#ff190c",
                "grey0": "#393e42",
                "grey1": "#43484d",
                "grey2": "#5e6977",
                "grey3": "#86939e",
                "grey4": "#bdc6cf",
                "grey5": "#e1e8ee",
                "greyOutline": "#bbb",
                "platform": Object {
                  "android": Object {
                    "error": "#f44336",
                    "primary": "#2196f3",
                    "secondary": "#9C27B0",
                    "success": "#4caf50",
                    "warning": "#ffeb3b",
                  },
                  "ios": Object {
                    "error": "#ff3b30",
                    "primary": "#007aff",
                    "secondary": "#5856d6",
                    "success": "#4cd964",
                    "warning": "#ffcc00",
                  },
                },
                "primary": "#2089dc",
                "searchBg": "#303337",
                "secondary": "#8F0CE8",
                "success": "#52c41a",
                "warning": "#faad14",
              },
            }
          }
          underlayColor="white"
        >
          <Text />
        </View>
      </View>
    </View>
    <View
      style={
        Array [
          Object {
            "shadowOffset": Object {
              "height": 6,
            },
            "shadowOpacity": 0.195,
            "shadowRadius": 5.4,
          },
          Array [
            Object {
              "display": "flex",
              "left": 15,
              "paddingLeft": 5,
              "position": "absolute",
              "top": 62,
            },
          ],
        ]
      }
    >
      <RCTScrollView
        ItemSeparatorComponent={[Function]}
        data={
          Array [
            Object {
              "key": "Logout",
            },
          ]
        }
        disableVirtualization={false}
        getItem={[Function]}
        getItemCount={[Function]}
        horizontal={false}
        initialNumToRender={10}
        keyExtractor={[Function]}
        maxToRenderPerBatch={10}
        numColumns={1}
        onContentSizeChange={[Function]}
        onEndReachedThreshold={2}
        onLayout={[Function]}
        onMomentumScrollEnd={[Function]}
        onScroll={[Function]}
        onScrollBeginDrag={[Function]}
        onScrollEndDrag={[Function]}
        removeClippedSubviews={false}
        renderItem={[Function]}
        scrollEventThrottle={50}
        stickyHeaderIndices={Array []}
        style={
          Object {
            "display": "none",
          }
        }
        updateCellsBatchingPeriod={50}
        viewabilityConfigCallbackPairs={Array []}
        windowSize={21}
      >
        <View>
          <View
            onLayout={[Function]}
            style={null}
          >
            <View
              accessible={true}
              isTVSelectable={true}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={null}
            >
              <View
                style={
                  Object {
                    "backgroundColor": "#fff",
                    "width": 100,
                  }
                }
              >
                <Text
                  style={
                    Object {
                      "fontSize": 20,
                      "padding": 5,
                      "paddingLeft": 5,
                    }
                  }
                >
                  Logout
                </Text>
              </View>
            </View>
          </View>
        </View>
      </RCTScrollView>
    </View>
    <Text
      style={
        Object {
          "fontSize": 25,
          "fontWeight": "700",
        }
      }
    >
      Code Lab
    </Text>
    <View
      style={
        Object {
          "display": "flex",
          "flexDirection": "row",
          "position": "absolute",
          "right": 14,
          "top": 14,
        }
      }
    >
      <TextInput
        allowFontScaling={true}
        onChangeText={[Function]}
        placeholder="Search..."
        rejectResponderTermination={true}
        style={
          Array [
            Object {
              "backgroundColor": "#F0F0F0",
              "borderColor": "gray",
              "borderRadius": 7,
              "borderWidth": 1,
              "display": "none",
              "height": 35,
              "padding": 5,
              "right": 0,
              "top": 0,
              "width": 250,
            },
            Object {
              "display": "none",
            },
          ]
        }
        underlineColorAndroid="transparent"
      />
    </View>
    <View>
      <View
        accessible={true}
        isTVSelectable={true}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "alignItems": "center",
            "backgroundColor": "transparent",
            "justifyContent": "center",
          }
        }
      >
        <Text />
      </View>
    </View>
  </View>
  <View
    style={
      Object {
        "backgroundColor": "#F0F0F0",
        "borderRadius": 8,
        "display": "flex",
        "flexDirection": "row",
        "width": "100%",
      }
    }
  >
    <Text
      style={
        Object {
          "padding": 10,
        }
      }
    >
      Loading...
    </Text>
  </View>
</RCTSafeAreaView>
`;

exports[`Render the ListDevs screen should render the ListDevs screen 2`] = `
<SafeAreaView>
  <StatusBar
    animated={false}
    backgroundColor="white"
    barStyle="dark-content"
    showHideTransition="fade"
    translucent={true}
  />
  <Apollo(Header)
    isLoggedIn={true}
    search={[Function]}
  />
  <View
    style={
      Object {
        "backgroundColor": "#F0F0F0",
        "borderRadius": 8,
        "display": "flex",
        "flexDirection": "row",
        "width": "100%",
      }
    }
  >
    <Text
      style={
        Object {
          "padding": 10,
        }
      }
    >
      Loading...
    </Text>
  </View>
</SafeAreaView>
`;
